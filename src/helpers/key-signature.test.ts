import * as keySignature from './key-signature';

describe('keySignature.validate()', () => {
    const table: [ string, boolean ][] = [
        [ 'C', true ],
        [ 'A#', false ],
        [ 'Bb', true ],
        [ 'Gb', true ],
        [ 'e', true ],
        [ 'g#', true ],
        [ 'ab', true ],
        [ 'h', false ],
        [ 'fb', false ],
        [ 'e#', false ],
        [ 'cc', false ],
        [ '', false ],
    ];

    test.each(table)('test %s', (key, ret) => {
        expect(keySignature.validate(key)).toBe(ret);
    });
});

describe('keySignature.toMidiBytes(), keySignature.fromMidiBytes()', () => {
    test('expect invalid key to throw error', () => {
        expect(() => keySignature.toMidiBytes('')).toThrow();
    });

    const table: [ string, number[] ][] = [
        [ 'C', [ 0xff, 0x59, 0x02, 0x00, 0x00 ] ],
        [ 'G', [ 0xff, 0x59, 0x02, 0x01, 0x00 ] ],
        [ 'D', [ 0xff, 0x59, 0x02, 0x02, 0x00 ] ],
        [ 'A', [ 0xff, 0x59, 0x02, 0x03, 0x00 ] ],
        [ 'E', [ 0xff, 0x59, 0x02, 0x04, 0x00 ] ],
        [ 'B', [ 0xff, 0x59, 0x02, 0x05, 0x00 ] ],
        [ 'F#', [ 0xff, 0x59, 0x02, 0x06, 0x00 ] ],
        [ 'C#', [ 0xff, 0x59, 0x02, 0x07, 0x00 ] ],
        [ 'F', [ 0xff, 0x59, 0x02, 0xff, 0x00 ] ],
        [ 'Bb', [ 0xff, 0x59, 0x02, 0xfe, 0x00 ] ],
        [ 'Eb', [ 0xff, 0x59, 0x02, 0xfd, 0x00 ] ],
        [ 'Ab', [ 0xff, 0x59, 0x02, 0xfc, 0x00 ] ],
        [ 'Db', [ 0xff, 0x59, 0x02, 0xfb, 0x00 ] ],
        [ 'Gb', [ 0xff, 0x59, 0x02, 0xfa, 0x00 ] ],
        [ 'Cb', [ 0xff, 0x59, 0x02, 0xf9, 0x00 ] ],
        [ 'a', [ 0xff, 0x59, 0x02, 0x00, 0x01 ] ],
        [ 'e', [ 0xff, 0x59, 0x02, 0x01, 0x01 ] ],
        [ 'b', [ 0xff, 0x59, 0x02, 0x02, 0x01 ] ],
        [ 'f#', [ 0xff, 0x59, 0x02, 0x03, 0x01 ] ],
        [ 'c#', [ 0xff, 0x59, 0x02, 0x04, 0x01 ] ],
        [ 'g#', [ 0xff, 0x59, 0x02, 0x05, 0x01 ] ],
        [ 'd#', [ 0xff, 0x59, 0x02, 0x06, 0x01 ] ],
        [ 'a#', [ 0xff, 0x59, 0x02, 0x07, 0x01 ] ],
        [ 'd', [ 0xff, 0x59, 0x02, 0xff, 0x01 ] ],
        [ 'g', [ 0xff, 0x59, 0x02, 0xfe, 0x01 ] ],
        [ 'c', [ 0xff, 0x59, 0x02, 0xfd, 0x01 ] ],
        [ 'f', [ 0xff, 0x59, 0x02, 0xfc, 0x01 ] ],
        [ 'bb', [ 0xff, 0x59, 0x02, 0xfb, 0x01 ] ],
        [ 'eb', [ 0xff, 0x59, 0x02, 0xfa, 0x01 ] ],
        [ 'ab', [ 0xff, 0x59, 0x02, 0xf9, 0x01 ] ],
    ];

    test.each(table)('convert %s', (key, bytes) => {
        expect(keySignature.toMidiBytes(key)).toStrictEqual(bytes);
        expect(keySignature.fromMidiBytes(bytes.slice(3))).toStrictEqual(key);
    });
});