HIGH PRIORITY:

FEATURES:
- MusicXML import/export

DOCUMENTATION:
- There should be more non-API documentation
 - Documentation should gain guided examples of how to create a score
 - Keep dictionary up to date
- Determine if we can easily replace terms in the documentation with the class they're already in, eg: Collection->ChordSeq

REFACTORING:
- The following possible refactors should probably be considered when adding the MusicXML import/export feature
 - Use the visitor pattern for .describe() and midi conversion
 - Introduce entities concept for instrument/time signature/key signature
 - Backport the more efficient flow for MIDI file generation implemented in the ongoing Rust port of Palestrina


LOW PRIORITY:

ERROR HANDLING:
- Error-checking on arrays should show a list of failing members/indices
 - This is a major undertaking that would require the order: MetaList, ChordSeqMember, Sequences
 - This would be best performed using a module like @trylonai/ts-result

BUGS/DESIGN ISSUES:
- Sliding window methods are implemented in a manner that allows recursive application of modifications
 - eg: `.replaceIfWindow(2, 1, () => true, ([a,b]) => a.transpose(b.val()))` will never return a Sequence longer than 2
 - While this behaviour is likely desired in some cases, it will also be undesired in other cases
- The replacer logic still shows very clearly its origin in untyped JavaScript
 - Consider replacing replacer methods with ones that indicate if they perform one-to-one or one-to-many replacement

MIDI:
- Potential enhancement: midi-reader could attempt to:
 - Associate events with the related note(s)
 - Collapse chords into one event

VISUALISATIONS:
- The original Score canvas could use some love and some compatibility with the 2D canvas style
- SVG as an alternative to canvas

CLEANLINESS:
- Pitch helpers are the only ones exported, which feels weird.

ONGOING
- Review docs, compile checklist of things to rereview
