1. TABLE TESTING OVERLY COMPLEX AND NOT ALWAYS PRACTICAL
- table testing can have problems because the following is weird and thinks first and second do not have to have the same type:

type TR<E> = [ string, E, E, E ];
describe('+', () => {
    const table: (TR<number> | TR<string>)[] = [
        [ 'numeric addition succeeds', 1, 2, 3 ],
        [ 'string concatenation succeeds', 'foo', 'bar', 'foobar '],
    ];

    test.each(table)('%s', (_, first, second, result) => {
        expect(first + second).toStrictEqual(result);
    });
});

Solution is something like this:
type TTR<T> = [ string, T[] ];

function x<T>(a: T, b: T) { return (a as number) + (b as number); }

const table: (TTR<number> | TTR<string>)[] = [
    [ 'numeric addition succeeds', [ 1, 2, 3 ] ],
    [ 'string concatenation succeeds', [ 'foo', 'bar', 'foobar' ] ],
];

table.forEach(([ _, [ a, b, c ] ]) => {
    console.log(`${_}: is equal? ${x(a, b) === c}`);
});

2. DEPENDENCE ON FACTORY TO INJECT SEQUENCE CONSTRUCTORS [RESOLVED]
- can't easily do midi-reader to score through non-factory because creation of the score depends on the factory to inject sequence constructors and validator
- new SequenceType() should not be an invalid way to create sequences
 - alternatively
  - revoke non-type access to all sequences and members
  - force everything to go through constructor
  - create scores through factory -> constructor (if array args) and factory -> midi-reader (if string args)

3. REPLACER IS A MESS
- replacer is still problematic, even with sequences/generic.ts containing this:
- perhaps two types of replacer? replaceWithSingleValue() v replaceWithMultipleValues?
protected override replacer<FromT>(r: Replacer<FromT, ET>, curr: FromT, i: number): ET[] {
    const retval = typeof r === 'function' ? r(curr, i) : r;

    if (retval instanceof Sequence) {
        return retval.contents;
    }

    if (Array.isArray(retval)) {
        return retval.map(v => this.constructMember(v));
    }

    return [ this.constructMember(retval as SeqMemberArgument) ];
}

concerns:
- different typing from in collection makes this messy AF to implement
- [ a, b, c ] could mean a chord containing [ a, b, c ] or a melody containing [ [ a ], [ b ], [ c ] ]

4. CONTROL FLOW IN COLLECTIONS
- Chained .while() and .do() calls are possibly problematic as they are not placed on a stack
 - Figure out if this needs solved, and if this also an issue with .if()/.then()/.else()
  - Unintuitive: after exiting the DO_1().WHILE_1() loop; it then executes a DO_1().WHILE_2() loop
    c.do(v => { console.log('dropping from', v.contents); return v.drop(); }) // DO_1
       .while(v => { console.log('checking length > 4'); return v.length > 4; }) // WHILE_1
       .while(v => { console.log('checking length < 6'); return v.length < 6; }) // WHILE_2
       .do(v => { console.log('trying to append'); return v.appendItems(v.valAt(0)); }) // DO_2

5. VALIDATOR [RESOLVED]
- likely could be cleaner
